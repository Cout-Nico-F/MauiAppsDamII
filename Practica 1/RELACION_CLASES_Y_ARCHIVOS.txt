
Herencia y relación entre clases
-------------------------------
- Application: Clase base de 'App', gestiona el ciclo de vida y recursos globales.
- Shell: Clase base de 'AppShell', gestiona la navegación y rutas.
- ContentPage: Clase base de 'MainPage', representa una página de contenido.
- MauiUIApplicationDelegate: Clase base de 'AppDelegate', integra MAUI con el ciclo de vida de la app en MacCatalyst.

Relación mediante x:Class
-------------------------
- El atributo x:Class en los archivos XAML es fundamental para vincular la interfaz visual definida en XAML con la lógica implementada en C#.
- x:Class especifica el nombre completo (namespace + clase) de la clase parcial que complementa el archivo XAML.
- Por ejemplo, en MainPage.xaml: x:Class="MauiFirstApp.MainPage" indica que existe una clase parcial MainPage en el namespace MauiFirstApp (definida en MainPage.xaml.cs).
- El compilador genera código que une los controles definidos en XAML con los campos y métodos de la clase C#, permitiendo acceder y manipular la interfaz desde el código.
- Gracias a x:Class, los eventos, propiedades y métodos definidos en C# pueden interactuar directamente con los elementos visuales del XAML.
- Esta relación permite separar la presentación (XAML) de la lógica (C#), facilitando el mantenimiento y la escalabilidad del proyecto.

Relación entre las clases y archivos existentes y los heredados en un proyecto .NET MAUI
====================================================================

1. App.xaml y App.xaml.cs
-------------------------
- App.xaml: Define la configuración global, recursos compartidos y estilos de la aplicación.
- App.xaml.cs: Clase parcial 'App' que hereda de 'Application'. Gestiona el ciclo de vida de la app y la inicialización de la ventana principal.
- Relación: App.xaml (interfaz y recursos) se enlaza con App.xaml.cs (lógica y ciclo de vida) mediante x:Class.

2. AppShell.xaml y AppShell.xaml.cs
-----------------------------------
- AppShell.xaml: Define la estructura de navegación principal usando el componente 'Shell'.
- AppShell.xaml.cs: Clase parcial 'AppShell' que hereda de 'Shell'. Inicializa la navegación y rutas.
- Relación: AppShell.xaml (estructura visual) se enlaza con AppShell.xaml.cs (lógica de navegación) mediante x:Class.

3. MainPage.xaml y MainPage.xaml.cs
-----------------------------------
- MainPage.xaml: Define la interfaz visual de la página principal.
- MainPage.xaml.cs: Clase parcial 'MainPage' que hereda de 'ContentPage'. Implementa la lógica y eventos de la página.
- Relación: MainPage.xaml (interfaz) se enlaza con MainPage.xaml.cs (lógica) mediante x:Class.

4. MauiProgram.cs
-----------------
- Clase estática 'MauiProgram' con el método 'CreateMauiApp'. Configura y construye la aplicación MAUI, fuentes y servicios.
- No hereda de ninguna clase, pero es el punto de entrada para la configuración global.

5. Platforms/MacCatalyst/Program.cs
-----------------------------------
- Clase 'Program' con el método 'Main'. Es el punto de entrada de la app en MacCatalyst.
- Llama a 'UIApplication.Main' y utiliza 'AppDelegate' como delegado principal.

6. Platforms/MacCatalyst/AppDelegate.cs
---------------------------------------
- Clase 'AppDelegate' que hereda de 'MauiUIApplicationDelegate'.
- Inicializa la app llamando a 'MauiProgram.CreateMauiApp'.
- Relación: Integra el ciclo de vida de la app MAUI con la plataforma MacCatalyst.

Resumen
-------
- Los archivos XAML definen la interfaz visual y estructura de navegación.
- Los archivos .cs asociados implementan la lógica y el ciclo de vida, heredando de clases base de MAUI.
- MauiProgram.cs configura la app y sus servicios.
- Los archivos en Platforms gestionan el arranque y ciclo de vida en cada plataforma específica.
- El atributo x:Class es el puente que conecta la interfaz visual con la lógica de programación en C#.
